# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codechef_client.api_client import ApiClient


class ProblemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def problems_category_name_get(self, category_name, **kwargs):  # noqa: E501
        """Get the list of problems for given categoryName.  # noqa: E501

        Returns a list of Problems according to the catergory name provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.problems_category_name_get(category_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str category_name: Possible categories are: school, easy, medium, hard, challenge, extcontest (required)
        :param str fields: Possible fields are problemCode, problemName, successfulSubmissions, accuracy. Multiple fields can be entered using comma.
        :param int offset: Starting index of the list, eg. 3
        :param int limit: Number of problems in a list, max 100
        :param str sort_by: Possible fields are -problemCode, problemName, successfulSubmissions, accuracy. 
        :param str sort_order: Possible fields are: asc or desc , Default = asc
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.problems_category_name_get_with_http_info(category_name, **kwargs)  # noqa: E501
        else:
            (data) = self.problems_category_name_get_with_http_info(category_name, **kwargs)  # noqa: E501
            return data

    def problems_category_name_get_with_http_info(self, category_name, **kwargs):  # noqa: E501
        """Get the list of problems for given categoryName.  # noqa: E501

        Returns a list of Problems according to the catergory name provided.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.problems_category_name_get_with_http_info(category_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str category_name: Possible categories are: school, easy, medium, hard, challenge, extcontest (required)
        :param str fields: Possible fields are problemCode, problemName, successfulSubmissions, accuracy. Multiple fields can be entered using comma.
        :param int offset: Starting index of the list, eg. 3
        :param int limit: Number of problems in a list, max 100
        :param str sort_by: Possible fields are -problemCode, problemName, successfulSubmissions, accuracy. 
        :param str sort_order: Possible fields are: asc or desc , Default = asc
        :return: InlineResponse2008
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['category_name', 'fields', 'offset', 'limit', 'sort_by', 'sort_order']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method problems_category_name_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'category_name' is set
        if ('category_name' not in params or
                params['category_name'] is None):
            raise ValueError("Missing the required parameter `category_name` when calling `problems_category_name_get`")  # noqa: E501

        if 'limit' in params and params['limit'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `problems_category_name_get`, must be a value less than or equal to `100`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'category_name' in params:
            path_params['categoryName'] = params['category_name']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort_by' in params:
            query_params.append(('sortBy', params['sort_by']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/problems/{categoryName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2008',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
