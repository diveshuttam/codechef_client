# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codechef_client.api_client import ApiClient


class SetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def sets_add_post(self, parameters, **kwargs):  # noqa: E501
        """Adds set to the user&#39;s account to whom the access token being used belongs.  # noqa: E501

        Takes setName, description as parameters and adds the set to user's account. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_add_post(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddSetParameters parameters: Takes setName and description (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_add_post_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_add_post_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def sets_add_post_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Adds set to the user&#39;s account to whom the access token being used belongs.  # noqa: E501

        Takes setName, description as parameters and adds the set to user's account. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_add_post_with_http_info(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddSetParameters parameters: Takes setName and description (required)
        :return: list[InlineResponse20018]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `sets_add_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20018]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_delete_delete(self, set_name, **kwargs):  # noqa: E501
        """Deletes set from the user&#39;s account to whom the access token belongs.  # noqa: E501

        Takes setName as condition parameters to delete the set from the user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_delete_delete(set_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Enter the name of the set you want to delete (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_delete_delete_with_http_info(set_name, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_delete_delete_with_http_info(set_name, **kwargs)  # noqa: E501
            return data

    def sets_delete_delete_with_http_info(self, set_name, **kwargs):  # noqa: E501
        """Deletes set from the user&#39;s account to whom the access token belongs.  # noqa: E501

        Takes setName as condition parameters to delete the set from the user's account.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_delete_delete_with_http_info(set_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Enter the name of the set you want to delete (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_name']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_delete_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `sets_delete_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_name' in params:
            query_params.append(('setName', params['set_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20019]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_get(self, **kwargs):  # noqa: E501
        """Get set details for logged in user  # noqa: E501

        Shows all the sets created by user to whom the access token being used belongs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_get(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Possible fields are: setName, description.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.sets_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def sets_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get set details for logged in user  # noqa: E501

        Shows all the sets created by user to whom the access token being used belongs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str fields: Possible fields are: setName, description.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_members_add_post(self, parameters, **kwargs):  # noqa: E501
        """Adds set members to an existing set of the user to whom the access token belongs.  # noqa: E501

        Takes setName, memberHandle(username of the member to be added) as parameters. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_add_post(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddSetMemberParameters parameters: Takes setName and memberHandle (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_members_add_post_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_members_add_post_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def sets_members_add_post_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Adds set members to an existing set of the user to whom the access token belongs.  # noqa: E501

        Takes setName, memberHandle(username of the member to be added) as parameters. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_add_post_with_http_info(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param AddSetMemberParameters parameters: Takes setName and memberHandle (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_members_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `sets_members_add_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/members/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_members_delete_delete(self, set_name, member_handle, **kwargs):  # noqa: E501
        """Removes members belonging to a set.  # noqa: E501

        Takes setName, memberHandle as parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_delete_delete(set_name, member_handle, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Enter the set name whose set member you want to delete. (required)
        :param str member_handle: Enter the username of the set member you want to remove from set. (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_members_delete_delete_with_http_info(set_name, member_handle, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_members_delete_delete_with_http_info(set_name, member_handle, **kwargs)  # noqa: E501
            return data

    def sets_members_delete_delete_with_http_info(self, set_name, member_handle, **kwargs):  # noqa: E501
        """Removes members belonging to a set.  # noqa: E501

        Takes setName, memberHandle as parameters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_delete_delete_with_http_info(set_name, member_handle, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Enter the set name whose set member you want to delete. (required)
        :param str member_handle: Enter the username of the set member you want to remove from set. (required)
        :return: InlineResponse20021
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_name', 'member_handle']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_members_delete_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `sets_members_delete_delete`")  # noqa: E501
        # verify the required parameter 'member_handle' is set
        if ('member_handle' not in params or
                params['member_handle'] is None):
            raise ValueError("Missing the required parameter `member_handle` when calling `sets_members_delete_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_name' in params:
            query_params.append(('setName', params['set_name']))  # noqa: E501
        if 'member_handle' in params:
            query_params.append(('memberHandle', params['member_handle']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/members/delete', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20021',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_members_get_get(self, set_name, **kwargs):  # noqa: E501
        """Get set details for particular sets of the logged in user  # noqa: E501

        Shows the details of the set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_get_get(set_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Set name whose member information is required. (required)
        :param str fields: Possible fields are: setName, memberName, country, allContestRating,longContestRating, shortContestRating, lTimeContestRating, allSchoolContestRating, longSchoolContestRating, shortSchoolContestRating, lTimeSchoolContestRating. Multiple fields can be entered using comma.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_members_get_get_with_http_info(set_name, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_members_get_get_with_http_info(set_name, **kwargs)  # noqa: E501
            return data

    def sets_members_get_get_with_http_info(self, set_name, **kwargs):  # noqa: E501
        """Get set details for particular sets of the logged in user  # noqa: E501

        Shows the details of the set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_members_get_get_with_http_info(set_name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str set_name: Set name whose member information is required. (required)
        :param str fields: Possible fields are: setName, memberName, country, allContestRating,longContestRating, shortContestRating, lTimeContestRating, allSchoolContestRating, longSchoolContestRating, shortSchoolContestRating, lTimeSchoolContestRating. Multiple fields can be entered using comma.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['set_name', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_members_get_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'set_name' is set
        if ('set_name' not in params or
                params['set_name'] is None):
            raise ValueError("Missing the required parameter `set_name` when calling `sets_members_get_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'set_name' in params:
            query_params.append(('setName', params['set_name']))  # noqa: E501
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/members/get', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sets_update_put(self, parameters, **kwargs):  # noqa: E501
        """Updates set of the logged in user&#39;s account.  # noqa: E501

        Takes setName as condition parameters and setName and/or description as extraParameters to update the set in user's account. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_update_put(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateSetParameters parameters: Takes setName and description (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.sets_update_put_with_http_info(parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.sets_update_put_with_http_info(parameters, **kwargs)  # noqa: E501
            return data

    def sets_update_put_with_http_info(self, parameters, **kwargs):  # noqa: E501
        """Updates set of the logged in user&#39;s account.  # noqa: E501

        Takes setName as condition parameters and setName and/or description as extraParameters to update the set in user's account. Look at samples for example  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.sets_update_put_with_http_info(parameters, async=True)
        >>> result = thread.get()

        :param async bool
        :param UpdateSetParameters parameters: Takes setName and description (required)
        :return: list[InlineResponse20019]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['parameters']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sets_update_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'parameters' is set
        if ('parameters' not in params or
                params['parameters'] is None):
            raise ValueError("Missing the required parameter `parameters` when calling `sets_update_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'parameters' in params:
            body_params = params['parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/sets/update', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[InlineResponse20019]',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
