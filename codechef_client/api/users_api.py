# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from codechef_client.api_client import ApiClient


class UsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def users_get(self, search, **kwargs):  # noqa: E501
        """Get the list of users maximum 20.  # noqa: E501

        Search of users based on usernames. Possible fields- username, fullname, country, state, city, rankings, ratings, occupation, organisation, language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_get(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search: Search string for username by any prefix of username, eg. search by hacker for usernames like hacker_ratty (required)
        :param str fields: Possible fields are- username, fullname, country, state, city, rankings, ratings, occupation, organization, language.  Multiple fields can be entered using comma
        :param int limit: Limit of list, maximum 20, eg. 10
        :param int offset: Starting index of list, eg. 5
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_get_with_http_info(search, **kwargs)  # noqa: E501
        else:
            (data) = self.users_get_with_http_info(search, **kwargs)  # noqa: E501
            return data

    def users_get_with_http_info(self, search, **kwargs):  # noqa: E501
        """Get the list of users maximum 20.  # noqa: E501

        Search of users based on usernames. Possible fields- username, fullname, country, state, city, rankings, ratings, occupation, organisation, language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_get_with_http_info(search, async=True)
        >>> result = thread.get()

        :param async bool
        :param str search: Search string for username by any prefix of username, eg. search by hacker for usernames like hacker_ratty (required)
        :param str fields: Possible fields are- username, fullname, country, state, city, rankings, ratings, occupation, organization, language.  Multiple fields can be entered using comma
        :param int limit: Limit of list, maximum 20, eg. 10
        :param int offset: Starting index of list, eg. 5
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['search', 'fields', 'limit', 'offset']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'search' is set
        if ('search' not in params or
                params['search'] is None):
            raise ValueError("Missing the required parameter `search` when calling `users_get`")  # noqa: E501

        if 'limit' in params and params['limit'] > 20:  # noqa: E501
            raise ValueError("Invalid value for parameter `limit` when calling `users_get`, must be a value less than or equal to `20`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'search' in params:
            query_params.append(('search', params['search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_me_get(self, **kwargs):  # noqa: E501
        """Fetches all the details of logged-in user.  # noqa: E501

        Fetches all the details of logged-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_me_get(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_me_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.users_me_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def users_me_get_with_http_info(self, **kwargs):  # noqa: E501
        """Fetches all the details of logged-in user.  # noqa: E501

        Fetches all the details of logged-in user.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_me_get_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_me_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/users/me', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def users_username_get(self, username, **kwargs):  # noqa: E501
        """Fetches all the details of a user.  # noqa: E501

        Complete detail of a user. Possible fields are- username, fullname, country, state, city, rankings, ratings, occupation, organization, language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_username_get(username, async=True)
        >>> result = thread.get()

        :param async bool
        :param str username: Username of the user, eg. hacker_ratty (required)
        :param str fields: Possible fields are - username, fullname, country, state, city, rankings, ratings, occupation, language, organization, problemStats, submissionStats.  Multiple fields can be entered using comma
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.users_username_get_with_http_info(username, **kwargs)  # noqa: E501
        else:
            (data) = self.users_username_get_with_http_info(username, **kwargs)  # noqa: E501
            return data

    def users_username_get_with_http_info(self, username, **kwargs):  # noqa: E501
        """Fetches all the details of a user.  # noqa: E501

        Complete detail of a user. Possible fields are- username, fullname, country, state, city, rankings, ratings, occupation, organization, language  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.users_username_get_with_http_info(username, async=True)
        >>> result = thread.get()

        :param async bool
        :param str username: Username of the user, eg. hacker_ratty (required)
        :param str fields: Possible fields are - username, fullname, country, state, city, rankings, ratings, occupation, language, organization, problemStats, submissionStats.  Multiple fields can be entered using comma
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['username', 'fields']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method users_username_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'username' is set
        if ('username' not in params or
                params['username'] is None):
            raise ValueError("Missing the required parameter `username` when calling `users_username_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'username' in params:
            path_params['username'] = params['username']  # noqa: E501

        query_params = []
        if 'fields' in params:
            query_params.append(('fields', params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['codechef_auth']  # noqa: E501

        return self.api_client.call_api(
            '/users/{username}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
