# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UserSubmissionStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepted_solutions': 'int',
        'attempted_problems': 'int',
        'compilation_error': 'int',
        'partially_solved_problems': 'int',
        'partially_solved_submissions': 'int',
        'runtime_error': 'int',
        'submitted_solutions': 'int',
        'solved_problems': 'int',
        'time_limit_exceeded': 'int',
        'wrong_submissions': 'int'
    }

    attribute_map = {
        'accepted_solutions': 'acceptedSolutions',
        'attempted_problems': 'attemptedProblems',
        'compilation_error': 'compilationError',
        'partially_solved_problems': 'partiallySolvedProblems',
        'partially_solved_submissions': 'partiallySolvedSubmissions',
        'runtime_error': 'runtimeError',
        'submitted_solutions': 'submittedSolutions',
        'solved_problems': 'solvedProblems',
        'time_limit_exceeded': 'timeLimitExceeded',
        'wrong_submissions': 'wrongSubmissions'
    }

    def __init__(self, accepted_solutions=None, attempted_problems=None, compilation_error=None, partially_solved_problems=None, partially_solved_submissions=None, runtime_error=None, submitted_solutions=None, solved_problems=None, time_limit_exceeded=None, wrong_submissions=None):  # noqa: E501
        """UserSubmissionStats - a model defined in Swagger"""  # noqa: E501

        self._accepted_solutions = None
        self._attempted_problems = None
        self._compilation_error = None
        self._partially_solved_problems = None
        self._partially_solved_submissions = None
        self._runtime_error = None
        self._submitted_solutions = None
        self._solved_problems = None
        self._time_limit_exceeded = None
        self._wrong_submissions = None
        self.discriminator = None

        if accepted_solutions is not None:
            self.accepted_solutions = accepted_solutions
        if attempted_problems is not None:
            self.attempted_problems = attempted_problems
        if compilation_error is not None:
            self.compilation_error = compilation_error
        if partially_solved_problems is not None:
            self.partially_solved_problems = partially_solved_problems
        if partially_solved_submissions is not None:
            self.partially_solved_submissions = partially_solved_submissions
        if runtime_error is not None:
            self.runtime_error = runtime_error
        if submitted_solutions is not None:
            self.submitted_solutions = submitted_solutions
        if solved_problems is not None:
            self.solved_problems = solved_problems
        if time_limit_exceeded is not None:
            self.time_limit_exceeded = time_limit_exceeded
        if wrong_submissions is not None:
            self.wrong_submissions = wrong_submissions

    @property
    def accepted_solutions(self):
        """Gets the accepted_solutions of this UserSubmissionStats.  # noqa: E501

        Total number of accepted solutions.  # noqa: E501

        :return: The accepted_solutions of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._accepted_solutions

    @accepted_solutions.setter
    def accepted_solutions(self, accepted_solutions):
        """Sets the accepted_solutions of this UserSubmissionStats.

        Total number of accepted solutions.  # noqa: E501

        :param accepted_solutions: The accepted_solutions of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._accepted_solutions = accepted_solutions

    @property
    def attempted_problems(self):
        """Gets the attempted_problems of this UserSubmissionStats.  # noqa: E501

        Total number of attempted problems.  # noqa: E501

        :return: The attempted_problems of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._attempted_problems

    @attempted_problems.setter
    def attempted_problems(self, attempted_problems):
        """Sets the attempted_problems of this UserSubmissionStats.

        Total number of attempted problems.  # noqa: E501

        :param attempted_problems: The attempted_problems of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._attempted_problems = attempted_problems

    @property
    def compilation_error(self):
        """Gets the compilation_error of this UserSubmissionStats.  # noqa: E501

        Total number of partially solved solutions.  # noqa: E501

        :return: The compilation_error of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._compilation_error

    @compilation_error.setter
    def compilation_error(self, compilation_error):
        """Sets the compilation_error of this UserSubmissionStats.

        Total number of partially solved solutions.  # noqa: E501

        :param compilation_error: The compilation_error of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._compilation_error = compilation_error

    @property
    def partially_solved_problems(self):
        """Gets the partially_solved_problems of this UserSubmissionStats.  # noqa: E501

        Total number of partially solved problems.  # noqa: E501

        :return: The partially_solved_problems of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._partially_solved_problems

    @partially_solved_problems.setter
    def partially_solved_problems(self, partially_solved_problems):
        """Sets the partially_solved_problems of this UserSubmissionStats.

        Total number of partially solved problems.  # noqa: E501

        :param partially_solved_problems: The partially_solved_problems of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._partially_solved_problems = partially_solved_problems

    @property
    def partially_solved_submissions(self):
        """Gets the partially_solved_submissions of this UserSubmissionStats.  # noqa: E501

        Total number of partially solved submissions made by user.  # noqa: E501

        :return: The partially_solved_submissions of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._partially_solved_submissions

    @partially_solved_submissions.setter
    def partially_solved_submissions(self, partially_solved_submissions):
        """Sets the partially_solved_submissions of this UserSubmissionStats.

        Total number of partially solved submissions made by user.  # noqa: E501

        :param partially_solved_submissions: The partially_solved_submissions of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._partially_solved_submissions = partially_solved_submissions

    @property
    def runtime_error(self):
        """Gets the runtime_error of this UserSubmissionStats.  # noqa: E501

        Total number of run time error solutions.  # noqa: E501

        :return: The runtime_error of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._runtime_error

    @runtime_error.setter
    def runtime_error(self, runtime_error):
        """Sets the runtime_error of this UserSubmissionStats.

        Total number of run time error solutions.  # noqa: E501

        :param runtime_error: The runtime_error of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._runtime_error = runtime_error

    @property
    def submitted_solutions(self):
        """Gets the submitted_solutions of this UserSubmissionStats.  # noqa: E501

        Total number of attempted problems.  # noqa: E501

        :return: The submitted_solutions of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._submitted_solutions

    @submitted_solutions.setter
    def submitted_solutions(self, submitted_solutions):
        """Sets the submitted_solutions of this UserSubmissionStats.

        Total number of attempted problems.  # noqa: E501

        :param submitted_solutions: The submitted_solutions of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._submitted_solutions = submitted_solutions

    @property
    def solved_problems(self):
        """Gets the solved_problems of this UserSubmissionStats.  # noqa: E501

        Total number of solved solutions.  # noqa: E501

        :return: The solved_problems of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._solved_problems

    @solved_problems.setter
    def solved_problems(self, solved_problems):
        """Sets the solved_problems of this UserSubmissionStats.

        Total number of solved solutions.  # noqa: E501

        :param solved_problems: The solved_problems of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._solved_problems = solved_problems

    @property
    def time_limit_exceeded(self):
        """Gets the time_limit_exceeded of this UserSubmissionStats.  # noqa: E501

        Total number of time limit exceeded solutions.  # noqa: E501

        :return: The time_limit_exceeded of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._time_limit_exceeded

    @time_limit_exceeded.setter
    def time_limit_exceeded(self, time_limit_exceeded):
        """Sets the time_limit_exceeded of this UserSubmissionStats.

        Total number of time limit exceeded solutions.  # noqa: E501

        :param time_limit_exceeded: The time_limit_exceeded of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._time_limit_exceeded = time_limit_exceeded

    @property
    def wrong_submissions(self):
        """Gets the wrong_submissions of this UserSubmissionStats.  # noqa: E501

        Total number of wrong solutions.  # noqa: E501

        :return: The wrong_submissions of this UserSubmissionStats.  # noqa: E501
        :rtype: int
        """
        return self._wrong_submissions

    @wrong_submissions.setter
    def wrong_submissions(self, wrong_submissions):
        """Sets the wrong_submissions of this UserSubmissionStats.

        Total number of wrong solutions.  # noqa: E501

        :param wrong_submissions: The wrong_submissions of this UserSubmissionStats.  # noqa: E501
        :type: int
        """

        self._wrong_submissions = wrong_submissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserSubmissionStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
