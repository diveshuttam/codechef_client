# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class IDEStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'lang_name': 'str',
        'lang_version': 'str',
        'time': 'int',
        'date': 'str',
        'status': 'str',
        'memory': 'int',
        'signal': 'int',
        'input': 'str',
        'output': 'str',
        'stderr': 'int',
        'cmpinfo': 'str'
    }

    attribute_map = {
        'lang_name': 'langName',
        'lang_version': 'langVersion',
        'time': 'time',
        'date': 'date',
        'status': 'status',
        'memory': 'memory',
        'signal': 'signal',
        'input': 'input',
        'output': 'output',
        'stderr': 'stderr',
        'cmpinfo': 'cmpinfo'
    }

    def __init__(self, lang_name=None, lang_version=None, time=None, date=None, status=None, memory=None, signal=None, input=None, output=None, stderr=None, cmpinfo=None):  # noqa: E501
        """IDEStatus - a model defined in Swagger"""  # noqa: E501

        self._lang_name = None
        self._lang_version = None
        self._time = None
        self._date = None
        self._status = None
        self._memory = None
        self._signal = None
        self._input = None
        self._output = None
        self._stderr = None
        self._cmpinfo = None
        self.discriminator = None

        if lang_name is not None:
            self.lang_name = lang_name
        if lang_version is not None:
            self.lang_version = lang_version
        if time is not None:
            self.time = time
        if date is not None:
            self.date = date
        if status is not None:
            self.status = status
        if memory is not None:
            self.memory = memory
        if signal is not None:
            self.signal = signal
        if input is not None:
            self.input = input
        if output is not None:
            self.output = output
        if stderr is not None:
            self.stderr = stderr
        if cmpinfo is not None:
            self.cmpinfo = cmpinfo

    @property
    def lang_name(self):
        """Gets the lang_name of this IDEStatus.  # noqa: E501

        Language name in which code was executed  # noqa: E501

        :return: The lang_name of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._lang_name

    @lang_name.setter
    def lang_name(self, lang_name):
        """Sets the lang_name of this IDEStatus.

        Language name in which code was executed  # noqa: E501

        :param lang_name: The lang_name of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._lang_name = lang_name

    @property
    def lang_version(self):
        """Gets the lang_version of this IDEStatus.  # noqa: E501

        Version of the language used to execute code.  # noqa: E501

        :return: The lang_version of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._lang_version

    @lang_version.setter
    def lang_version(self, lang_version):
        """Sets the lang_version of this IDEStatus.

        Version of the language used to execute code.  # noqa: E501

        :param lang_version: The lang_version of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._lang_version = lang_version

    @property
    def time(self):
        """Gets the time of this IDEStatus.  # noqa: E501

        Time taken by code during execution  # noqa: E501

        :return: The time of this IDEStatus.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this IDEStatus.

        Time taken by code during execution  # noqa: E501

        :param time: The time of this IDEStatus.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def date(self):
        """Gets the date of this IDEStatus.  # noqa: E501

        Date and time of code submission  # noqa: E501

        :return: The date of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this IDEStatus.

        Date and time of code submission  # noqa: E501

        :param date: The date of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._date = date

    @property
    def status(self):
        """Gets the status of this IDEStatus.  # noqa: E501

        Status of code execution.  # noqa: E501

        :return: The status of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IDEStatus.

        Status of code execution.  # noqa: E501

        :param status: The status of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def memory(self):
        """Gets the memory of this IDEStatus.  # noqa: E501

        Memory consumed by code.  # noqa: E501

        :return: The memory of this IDEStatus.  # noqa: E501
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory):
        """Sets the memory of this IDEStatus.

        Memory consumed by code.  # noqa: E501

        :param memory: The memory of this IDEStatus.  # noqa: E501
        :type: int
        """

        self._memory = memory

    @property
    def signal(self):
        """Gets the signal of this IDEStatus.  # noqa: E501

        Signal received  # noqa: E501

        :return: The signal of this IDEStatus.  # noqa: E501
        :rtype: int
        """
        return self._signal

    @signal.setter
    def signal(self, signal):
        """Sets the signal of this IDEStatus.

        Signal received  # noqa: E501

        :param signal: The signal of this IDEStatus.  # noqa: E501
        :type: int
        """

        self._signal = signal

    @property
    def input(self):
        """Gets the input of this IDEStatus.  # noqa: E501

        Input on which code should run  # noqa: E501

        :return: The input of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this IDEStatus.

        Input on which code should run  # noqa: E501

        :param input: The input of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._input = input

    @property
    def output(self):
        """Gets the output of this IDEStatus.  # noqa: E501

        Output formed as a result of code execution  # noqa: E501

        :return: The output of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._output

    @output.setter
    def output(self, output):
        """Sets the output of this IDEStatus.

        Output formed as a result of code execution  # noqa: E501

        :param output: The output of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._output = output

    @property
    def stderr(self):
        """Gets the stderr of this IDEStatus.  # noqa: E501

        Standard error (if any)  # noqa: E501

        :return: The stderr of this IDEStatus.  # noqa: E501
        :rtype: int
        """
        return self._stderr

    @stderr.setter
    def stderr(self, stderr):
        """Sets the stderr of this IDEStatus.

        Standard error (if any)  # noqa: E501

        :param stderr: The stderr of this IDEStatus.  # noqa: E501
        :type: int
        """

        self._stderr = stderr

    @property
    def cmpinfo(self):
        """Gets the cmpinfo of this IDEStatus.  # noqa: E501

        Compilation information  # noqa: E501

        :return: The cmpinfo of this IDEStatus.  # noqa: E501
        :rtype: str
        """
        return self._cmpinfo

    @cmpinfo.setter
    def cmpinfo(self, cmpinfo):
        """Sets the cmpinfo of this IDEStatus.

        Compilation information  # noqa: E501

        :param cmpinfo: The cmpinfo of this IDEStatus.  # noqa: E501
        :type: str
        """

        self._cmpinfo = cmpinfo

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IDEStatus):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
