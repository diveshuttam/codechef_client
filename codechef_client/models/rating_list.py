# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RatingList(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'global_rank': 'int',
        'country_rank': 'int',
        'rating': 'float',
        'diff': 'float',
        'username': 'str',
        'country': 'str',
        'country_code': 'str',
        'institution': 'str',
        'institution_type': 'str'
    }

    attribute_map = {
        'global_rank': 'globalRank',
        'country_rank': 'CountryRank',
        'rating': 'rating',
        'diff': 'diff',
        'username': 'username',
        'country': 'country',
        'country_code': 'countryCode',
        'institution': 'institution',
        'institution_type': 'institutionType'
    }

    def __init__(self, global_rank=None, country_rank=None, rating=None, diff=None, username=None, country=None, country_code=None, institution=None, institution_type=None):  # noqa: E501
        """RatingList - a model defined in Swagger"""  # noqa: E501

        self._global_rank = None
        self._country_rank = None
        self._rating = None
        self._diff = None
        self._username = None
        self._country = None
        self._country_code = None
        self._institution = None
        self._institution_type = None
        self.discriminator = None

        if global_rank is not None:
            self.global_rank = global_rank
        if country_rank is not None:
            self.country_rank = country_rank
        if rating is not None:
            self.rating = rating
        if diff is not None:
            self.diff = diff
        if username is not None:
            self.username = username
        if country is not None:
            self.country = country
        if country_code is not None:
            self.country_code = country_code
        if institution is not None:
            self.institution = institution
        if institution_type is not None:
            self.institution_type = institution_type

    @property
    def global_rank(self):
        """Gets the global_rank of this RatingList.  # noqa: E501

        Global rank of user  # noqa: E501

        :return: The global_rank of this RatingList.  # noqa: E501
        :rtype: int
        """
        return self._global_rank

    @global_rank.setter
    def global_rank(self, global_rank):
        """Sets the global_rank of this RatingList.

        Global rank of user  # noqa: E501

        :param global_rank: The global_rank of this RatingList.  # noqa: E501
        :type: int
        """

        self._global_rank = global_rank

    @property
    def country_rank(self):
        """Gets the country_rank of this RatingList.  # noqa: E501

        Rank of user within his country.  # noqa: E501

        :return: The country_rank of this RatingList.  # noqa: E501
        :rtype: int
        """
        return self._country_rank

    @country_rank.setter
    def country_rank(self, country_rank):
        """Sets the country_rank of this RatingList.

        Rank of user within his country.  # noqa: E501

        :param country_rank: The country_rank of this RatingList.  # noqa: E501
        :type: int
        """

        self._country_rank = country_rank

    @property
    def rating(self):
        """Gets the rating of this RatingList.  # noqa: E501

        Rating of user in give contest type  # noqa: E501

        :return: The rating of this RatingList.  # noqa: E501
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this RatingList.

        Rating of user in give contest type  # noqa: E501

        :param rating: The rating of this RatingList.  # noqa: E501
        :type: float
        """

        self._rating = rating

    @property
    def diff(self):
        """Gets the diff of this RatingList.  # noqa: E501

        Difference in rating  # noqa: E501

        :return: The diff of this RatingList.  # noqa: E501
        :rtype: float
        """
        return self._diff

    @diff.setter
    def diff(self, diff):
        """Sets the diff of this RatingList.

        Difference in rating  # noqa: E501

        :param diff: The diff of this RatingList.  # noqa: E501
        :type: float
        """

        self._diff = diff

    @property
    def username(self):
        """Gets the username of this RatingList.  # noqa: E501

        Username  # noqa: E501

        :return: The username of this RatingList.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this RatingList.

        Username  # noqa: E501

        :param username: The username of this RatingList.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def country(self):
        """Gets the country of this RatingList.  # noqa: E501

        Country name  # noqa: E501

        :return: The country of this RatingList.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RatingList.

        Country name  # noqa: E501

        :param country: The country of this RatingList.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this RatingList.  # noqa: E501

        Country code  # noqa: E501

        :return: The country_code of this RatingList.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this RatingList.

        Country code  # noqa: E501

        :param country_code: The country_code of this RatingList.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def institution(self):
        """Gets the institution of this RatingList.  # noqa: E501

        Institution to which the user belongs  # noqa: E501

        :return: The institution of this RatingList.  # noqa: E501
        :rtype: str
        """
        return self._institution

    @institution.setter
    def institution(self, institution):
        """Sets the institution of this RatingList.

        Institution to which the user belongs  # noqa: E501

        :param institution: The institution of this RatingList.  # noqa: E501
        :type: str
        """

        self._institution = institution

    @property
    def institution_type(self):
        """Gets the institution_type of this RatingList.  # noqa: E501

        Whether institution is school, college or organisation.  # noqa: E501

        :return: The institution_type of this RatingList.  # noqa: E501
        :rtype: str
        """
        return self._institution_type

    @institution_type.setter
    def institution_type(self, institution_type):
        """Sets the institution_type of this RatingList.

        Whether institution is school, college or organisation.  # noqa: E501

        :param institution_type: The institution_type of this RatingList.  # noqa: E501
        :type: str
        """

        self._institution_type = institution_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingList):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
