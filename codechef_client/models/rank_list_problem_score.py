# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RankListProblemScore(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'problem_code': 'float',
        'best_solution_time': 'float',
        'penalty': 'int',
        'score': 'float'
    }

    attribute_map = {
        'problem_code': 'problemCode',
        'best_solution_time': 'bestSolutionTime',
        'penalty': 'penalty',
        'score': 'score'
    }

    def __init__(self, problem_code=None, best_solution_time=None, penalty=None, score=None):  # noqa: E501
        """RankListProblemScore - a model defined in Swagger"""  # noqa: E501

        self._problem_code = None
        self._best_solution_time = None
        self._penalty = None
        self._score = None
        self.discriminator = None

        if problem_code is not None:
            self.problem_code = problem_code
        if best_solution_time is not None:
            self.best_solution_time = best_solution_time
        if penalty is not None:
            self.penalty = penalty
        if score is not None:
            self.score = score

    @property
    def problem_code(self):
        """Gets the problem_code of this RankListProblemScore.  # noqa: E501

        Problem code  # noqa: E501

        :return: The problem_code of this RankListProblemScore.  # noqa: E501
        :rtype: float
        """
        return self._problem_code

    @problem_code.setter
    def problem_code(self, problem_code):
        """Sets the problem_code of this RankListProblemScore.

        Problem code  # noqa: E501

        :param problem_code: The problem_code of this RankListProblemScore.  # noqa: E501
        :type: float
        """

        self._problem_code = problem_code

    @property
    def best_solution_time(self):
        """Gets the best_solution_time of this RankListProblemScore.  # noqa: E501

        Time when the best solution was submitted.  # noqa: E501

        :return: The best_solution_time of this RankListProblemScore.  # noqa: E501
        :rtype: float
        """
        return self._best_solution_time

    @best_solution_time.setter
    def best_solution_time(self, best_solution_time):
        """Sets the best_solution_time of this RankListProblemScore.

        Time when the best solution was submitted.  # noqa: E501

        :param best_solution_time: The best_solution_time of this RankListProblemScore.  # noqa: E501
        :type: float
        """

        self._best_solution_time = best_solution_time

    @property
    def penalty(self):
        """Gets the penalty of this RankListProblemScore.  # noqa: E501

        Number of incorrect submissions by user  # noqa: E501

        :return: The penalty of this RankListProblemScore.  # noqa: E501
        :rtype: int
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this RankListProblemScore.

        Number of incorrect submissions by user  # noqa: E501

        :param penalty: The penalty of this RankListProblemScore.  # noqa: E501
        :type: int
        """

        self._penalty = penalty

    @property
    def score(self):
        """Gets the score of this RankListProblemScore.  # noqa: E501

        Points scored by user  # noqa: E501

        :return: The score of this RankListProblemScore.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RankListProblemScore.

        Points scored by user  # noqa: E501

        :param score: The score of this RankListProblemScore.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RankListProblemScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
