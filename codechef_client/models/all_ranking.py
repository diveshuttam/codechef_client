# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from codechef_client.models.ranking import Ranking  # noqa: F401,E501


class AllRanking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'all_contest_ranking': 'Ranking',
        'long_ranking': 'Ranking',
        'short_ranking': 'Ranking',
        'ltime_ranking': 'Ranking',
        'all_school_ranking': 'Ranking',
        'long_school_ranking': 'Ranking',
        'short_school_ranking': 'Ranking',
        'ltime_school_ranking': 'Ranking'
    }

    attribute_map = {
        'all_contest_ranking': 'allContestRanking',
        'long_ranking': 'longRanking',
        'short_ranking': 'shortRanking',
        'ltime_ranking': 'ltimeRanking',
        'all_school_ranking': 'allSchoolRanking',
        'long_school_ranking': 'longSchoolRanking',
        'short_school_ranking': 'shortSchoolRanking',
        'ltime_school_ranking': 'ltimeSchoolRanking'
    }

    def __init__(self, all_contest_ranking=None, long_ranking=None, short_ranking=None, ltime_ranking=None, all_school_ranking=None, long_school_ranking=None, short_school_ranking=None, ltime_school_ranking=None):  # noqa: E501
        """AllRanking - a model defined in Swagger"""  # noqa: E501

        self._all_contest_ranking = None
        self._long_ranking = None
        self._short_ranking = None
        self._ltime_ranking = None
        self._all_school_ranking = None
        self._long_school_ranking = None
        self._short_school_ranking = None
        self._ltime_school_ranking = None
        self.discriminator = None

        if all_contest_ranking is not None:
            self.all_contest_ranking = all_contest_ranking
        if long_ranking is not None:
            self.long_ranking = long_ranking
        if short_ranking is not None:
            self.short_ranking = short_ranking
        if ltime_ranking is not None:
            self.ltime_ranking = ltime_ranking
        if all_school_ranking is not None:
            self.all_school_ranking = all_school_ranking
        if long_school_ranking is not None:
            self.long_school_ranking = long_school_ranking
        if short_school_ranking is not None:
            self.short_school_ranking = short_school_ranking
        if ltime_school_ranking is not None:
            self.ltime_school_ranking = ltime_school_ranking

    @property
    def all_contest_ranking(self):
        """Gets the all_contest_ranking of this AllRanking.  # noqa: E501


        :return: The all_contest_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._all_contest_ranking

    @all_contest_ranking.setter
    def all_contest_ranking(self, all_contest_ranking):
        """Sets the all_contest_ranking of this AllRanking.


        :param all_contest_ranking: The all_contest_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._all_contest_ranking = all_contest_ranking

    @property
    def long_ranking(self):
        """Gets the long_ranking of this AllRanking.  # noqa: E501


        :return: The long_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._long_ranking

    @long_ranking.setter
    def long_ranking(self, long_ranking):
        """Sets the long_ranking of this AllRanking.


        :param long_ranking: The long_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._long_ranking = long_ranking

    @property
    def short_ranking(self):
        """Gets the short_ranking of this AllRanking.  # noqa: E501


        :return: The short_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._short_ranking

    @short_ranking.setter
    def short_ranking(self, short_ranking):
        """Sets the short_ranking of this AllRanking.


        :param short_ranking: The short_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._short_ranking = short_ranking

    @property
    def ltime_ranking(self):
        """Gets the ltime_ranking of this AllRanking.  # noqa: E501


        :return: The ltime_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._ltime_ranking

    @ltime_ranking.setter
    def ltime_ranking(self, ltime_ranking):
        """Sets the ltime_ranking of this AllRanking.


        :param ltime_ranking: The ltime_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._ltime_ranking = ltime_ranking

    @property
    def all_school_ranking(self):
        """Gets the all_school_ranking of this AllRanking.  # noqa: E501


        :return: The all_school_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._all_school_ranking

    @all_school_ranking.setter
    def all_school_ranking(self, all_school_ranking):
        """Sets the all_school_ranking of this AllRanking.


        :param all_school_ranking: The all_school_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._all_school_ranking = all_school_ranking

    @property
    def long_school_ranking(self):
        """Gets the long_school_ranking of this AllRanking.  # noqa: E501


        :return: The long_school_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._long_school_ranking

    @long_school_ranking.setter
    def long_school_ranking(self, long_school_ranking):
        """Sets the long_school_ranking of this AllRanking.


        :param long_school_ranking: The long_school_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._long_school_ranking = long_school_ranking

    @property
    def short_school_ranking(self):
        """Gets the short_school_ranking of this AllRanking.  # noqa: E501


        :return: The short_school_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._short_school_ranking

    @short_school_ranking.setter
    def short_school_ranking(self, short_school_ranking):
        """Sets the short_school_ranking of this AllRanking.


        :param short_school_ranking: The short_school_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._short_school_ranking = short_school_ranking

    @property
    def ltime_school_ranking(self):
        """Gets the ltime_school_ranking of this AllRanking.  # noqa: E501


        :return: The ltime_school_ranking of this AllRanking.  # noqa: E501
        :rtype: Ranking
        """
        return self._ltime_school_ranking

    @ltime_school_ranking.setter
    def ltime_school_ranking(self, ltime_school_ranking):
        """Sets the ltime_school_ranking of this AllRanking.


        :param ltime_school_ranking: The ltime_school_ranking of this AllRanking.  # noqa: E501
        :type: Ranking
        """

        self._ltime_school_ranking = ltime_school_ranking

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AllRanking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
