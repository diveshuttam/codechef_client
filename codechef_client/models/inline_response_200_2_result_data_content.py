# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from codechef_client.models.contest_list import ContestList  # noqa: F401,E501


class InlineResponse2002ResultDataContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_time': 'str',
        'contest_list': 'list[ContestList]'
    }

    attribute_map = {
        'current_time': 'currentTime',
        'contest_list': 'contestList'
    }

    def __init__(self, current_time=None, contest_list=None):  # noqa: E501
        """InlineResponse2002ResultDataContent - a model defined in Swagger"""  # noqa: E501

        self._current_time = None
        self._contest_list = None
        self.discriminator = None

        if current_time is not None:
            self.current_time = current_time
        if contest_list is not None:
            self.contest_list = contest_list

    @property
    def current_time(self):
        """Gets the current_time of this InlineResponse2002ResultDataContent.  # noqa: E501

        Current Timestamp.  # noqa: E501

        :return: The current_time of this InlineResponse2002ResultDataContent.  # noqa: E501
        :rtype: str
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this InlineResponse2002ResultDataContent.

        Current Timestamp.  # noqa: E501

        :param current_time: The current_time of this InlineResponse2002ResultDataContent.  # noqa: E501
        :type: str
        """

        self._current_time = current_time

    @property
    def contest_list(self):
        """Gets the contest_list of this InlineResponse2002ResultDataContent.  # noqa: E501


        :return: The contest_list of this InlineResponse2002ResultDataContent.  # noqa: E501
        :rtype: list[ContestList]
        """
        return self._contest_list

    @contest_list.setter
    def contest_list(self, contest_list):
        """Sets the contest_list of this InlineResponse2002ResultDataContent.


        :param contest_list: The contest_list of this InlineResponse2002ResultDataContent.  # noqa: E501
        :type: list[ContestList]
        """

        self._contest_list = contest_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2002ResultDataContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
