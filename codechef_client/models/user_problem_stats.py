# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from codechef_client.models.contest_wise_problems import ContestWiseProblems  # noqa: F401,E501


class UserProblemStats(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'solved': 'ContestWiseProblems',
        'partially_solved': 'ContestWiseProblems',
        'attempted': 'ContestWiseProblems'
    }

    attribute_map = {
        'solved': 'solved',
        'partially_solved': 'partiallySolved',
        'attempted': 'attempted'
    }

    def __init__(self, solved=None, partially_solved=None, attempted=None):  # noqa: E501
        """UserProblemStats - a model defined in Swagger"""  # noqa: E501

        self._solved = None
        self._partially_solved = None
        self._attempted = None
        self.discriminator = None

        if solved is not None:
            self.solved = solved
        if partially_solved is not None:
            self.partially_solved = partially_solved
        if attempted is not None:
            self.attempted = attempted

    @property
    def solved(self):
        """Gets the solved of this UserProblemStats.  # noqa: E501


        :return: The solved of this UserProblemStats.  # noqa: E501
        :rtype: ContestWiseProblems
        """
        return self._solved

    @solved.setter
    def solved(self, solved):
        """Sets the solved of this UserProblemStats.


        :param solved: The solved of this UserProblemStats.  # noqa: E501
        :type: ContestWiseProblems
        """

        self._solved = solved

    @property
    def partially_solved(self):
        """Gets the partially_solved of this UserProblemStats.  # noqa: E501


        :return: The partially_solved of this UserProblemStats.  # noqa: E501
        :rtype: ContestWiseProblems
        """
        return self._partially_solved

    @partially_solved.setter
    def partially_solved(self, partially_solved):
        """Sets the partially_solved of this UserProblemStats.


        :param partially_solved: The partially_solved of this UserProblemStats.  # noqa: E501
        :type: ContestWiseProblems
        """

        self._partially_solved = partially_solved

    @property
    def attempted(self):
        """Gets the attempted of this UserProblemStats.  # noqa: E501


        :return: The attempted of this UserProblemStats.  # noqa: E501
        :rtype: ContestWiseProblems
        """
        return self._attempted

    @attempted.setter
    def attempted(self, attempted):
        """Sets the attempted of this UserProblemStats.


        :param attempted: The attempted of this UserProblemStats.  # noqa: E501
        :type: ContestWiseProblems
        """

        self._attempted = attempted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserProblemStats):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
