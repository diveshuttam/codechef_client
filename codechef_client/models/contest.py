# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from codechef_client.models.contest_problems_list import ContestProblemsList  # noqa: F401,E501


class Contest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'code': 'str',
        'name': 'str',
        'type': 'str',
        'url': 'str',
        'banner_file': 'str',
        'rules': 'str',
        'announcements': 'str',
        'start_date': 'str',
        'end_date': 'str',
        'freezing_time': 'str',
        'current_time': 'str',
        'problems_list': 'list[ContestProblemsList]'
    }

    attribute_map = {
        'code': 'code',
        'name': 'name',
        'type': 'type',
        'url': 'URL',
        'banner_file': 'bannerFile',
        'rules': 'rules',
        'announcements': 'announcements',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'freezing_time': 'freezingTime',
        'current_time': 'currentTime',
        'problems_list': 'problemsList'
    }

    def __init__(self, code=None, name=None, type=None, url=None, banner_file=None, rules=None, announcements=None, start_date=None, end_date=None, freezing_time=None, current_time=None, problems_list=None):  # noqa: E501
        """Contest - a model defined in Swagger"""  # noqa: E501

        self._code = None
        self._name = None
        self._type = None
        self._url = None
        self._banner_file = None
        self._rules = None
        self._announcements = None
        self._start_date = None
        self._end_date = None
        self._freezing_time = None
        self._current_time = None
        self._problems_list = None
        self.discriminator = None

        if code is not None:
            self.code = code
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if url is not None:
            self.url = url
        if banner_file is not None:
            self.banner_file = banner_file
        if rules is not None:
            self.rules = rules
        if announcements is not None:
            self.announcements = announcements
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if freezing_time is not None:
            self.freezing_time = freezing_time
        if current_time is not None:
            self.current_time = current_time
        if problems_list is not None:
            self.problems_list = problems_list

    @property
    def code(self):
        """Gets the code of this Contest.  # noqa: E501

        Contest code  # noqa: E501

        :return: The code of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Contest.

        Contest code  # noqa: E501

        :param code: The code of this Contest.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def name(self):
        """Gets the name of this Contest.  # noqa: E501

        Contest title/name  # noqa: E501

        :return: The name of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contest.

        Contest title/name  # noqa: E501

        :param name: The name of this Contest.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this Contest.  # noqa: E501

        Ranklist type/format of the contest  # noqa: E501

        :return: The type of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Contest.

        Ranklist type/format of the contest  # noqa: E501

        :param type: The type of this Contest.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this Contest.  # noqa: E501

        URL of the contest.  # noqa: E501

        :return: The url of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Contest.

        URL of the contest.  # noqa: E501

        :param url: The url of this Contest.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def banner_file(self):
        """Gets the banner_file of this Contest.  # noqa: E501

        Banner URL of the contest  # noqa: E501

        :return: The banner_file of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._banner_file

    @banner_file.setter
    def banner_file(self, banner_file):
        """Sets the banner_file of this Contest.

        Banner URL of the contest  # noqa: E501

        :param banner_file: The banner_file of this Contest.  # noqa: E501
        :type: str
        """

        self._banner_file = banner_file

    @property
    def rules(self):
        """Gets the rules of this Contest.  # noqa: E501

        Rules of the contest, html  # noqa: E501

        :return: The rules of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this Contest.

        Rules of the contest, html  # noqa: E501

        :param rules: The rules of this Contest.  # noqa: E501
        :type: str
        """

        self._rules = rules

    @property
    def announcements(self):
        """Gets the announcements of this Contest.  # noqa: E501

        Announcements of the contest  # noqa: E501

        :return: The announcements of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._announcements

    @announcements.setter
    def announcements(self, announcements):
        """Sets the announcements of this Contest.

        Announcements of the contest  # noqa: E501

        :param announcements: The announcements of this Contest.  # noqa: E501
        :type: str
        """

        self._announcements = announcements

    @property
    def start_date(self):
        """Gets the start_date of this Contest.  # noqa: E501

        Start time of the contest  # noqa: E501

        :return: The start_date of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Contest.

        Start time of the contest  # noqa: E501

        :param start_date: The start_date of this Contest.  # noqa: E501
        :type: str
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Contest.  # noqa: E501

        End time of the contest  # noqa: E501

        :return: The end_date of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Contest.

        End time of the contest  # noqa: E501

        :param end_date: The end_date of this Contest.  # noqa: E501
        :type: str
        """

        self._end_date = end_date

    @property
    def freezing_time(self):
        """Gets the freezing_time of this Contest.  # noqa: E501

        Freezing time of the contest  # noqa: E501

        :return: The freezing_time of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._freezing_time

    @freezing_time.setter
    def freezing_time(self, freezing_time):
        """Sets the freezing_time of this Contest.

        Freezing time of the contest  # noqa: E501

        :param freezing_time: The freezing_time of this Contest.  # noqa: E501
        :type: str
        """

        self._freezing_time = freezing_time

    @property
    def current_time(self):
        """Gets the current_time of this Contest.  # noqa: E501

        Freezing time of the contest  # noqa: E501

        :return: The current_time of this Contest.  # noqa: E501
        :rtype: str
        """
        return self._current_time

    @current_time.setter
    def current_time(self, current_time):
        """Sets the current_time of this Contest.

        Freezing time of the contest  # noqa: E501

        :param current_time: The current_time of this Contest.  # noqa: E501
        :type: str
        """

        self._current_time = current_time

    @property
    def problems_list(self):
        """Gets the problems_list of this Contest.  # noqa: E501


        :return: The problems_list of this Contest.  # noqa: E501
        :rtype: list[ContestProblemsList]
        """
        return self._problems_list

    @problems_list.setter
    def problems_list(self, problems_list):
        """Sets the problems_list of this Contest.


        :param problems_list: The problems_list of this Contest.  # noqa: E501
        :type: list[ContestProblemsList]
        """

        self._problems_list = problems_list

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
