# coding: utf-8

"""
    CodeChef API

    CodeChef API to support different applications.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TodoProblemDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'problem_code': 'str',
        'contest_code': 'str',
        'creation_time': 'str',
        'status': 'str',
        'tags': 'list[str]',
        'problem_name': 'str',
        'problem_redirect': 'bool',
        'is_added_to_practice': 'bool',
        'contest_url': 'str',
        'problem_url': 'str'
    }

    attribute_map = {
        'problem_code': 'problemCode',
        'contest_code': 'contestCode',
        'creation_time': 'creationTime',
        'status': 'status',
        'tags': 'tags',
        'problem_name': 'problemName',
        'problem_redirect': 'problemRedirect',
        'is_added_to_practice': 'isAddedToPractice',
        'contest_url': 'contestUrl',
        'problem_url': 'problemUrl'
    }

    def __init__(self, problem_code=None, contest_code=None, creation_time=None, status=None, tags=None, problem_name=None, problem_redirect=None, is_added_to_practice=None, contest_url=None, problem_url=None):  # noqa: E501
        """TodoProblemDetails - a model defined in Swagger"""  # noqa: E501

        self._problem_code = None
        self._contest_code = None
        self._creation_time = None
        self._status = None
        self._tags = None
        self._problem_name = None
        self._problem_redirect = None
        self._is_added_to_practice = None
        self._contest_url = None
        self._problem_url = None
        self.discriminator = None

        if problem_code is not None:
            self.problem_code = problem_code
        if contest_code is not None:
            self.contest_code = contest_code
        if creation_time is not None:
            self.creation_time = creation_time
        if status is not None:
            self.status = status
        if tags is not None:
            self.tags = tags
        if problem_name is not None:
            self.problem_name = problem_name
        if problem_redirect is not None:
            self.problem_redirect = problem_redirect
        if is_added_to_practice is not None:
            self.is_added_to_practice = is_added_to_practice
        if contest_url is not None:
            self.contest_url = contest_url
        if problem_url is not None:
            self.problem_url = problem_url

    @property
    def problem_code(self):
        """Gets the problem_code of this TodoProblemDetails.  # noqa: E501

        Problem code corresponding to the problem.  # noqa: E501

        :return: The problem_code of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._problem_code

    @problem_code.setter
    def problem_code(self, problem_code):
        """Sets the problem_code of this TodoProblemDetails.

        Problem code corresponding to the problem.  # noqa: E501

        :param problem_code: The problem_code of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._problem_code = problem_code

    @property
    def contest_code(self):
        """Gets the contest_code of this TodoProblemDetails.  # noqa: E501

        Contest code corresponding to the problem.  # noqa: E501

        :return: The contest_code of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._contest_code

    @contest_code.setter
    def contest_code(self, contest_code):
        """Sets the contest_code of this TodoProblemDetails.

        Contest code corresponding to the problem.  # noqa: E501

        :param contest_code: The contest_code of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._contest_code = contest_code

    @property
    def creation_time(self):
        """Gets the creation_time of this TodoProblemDetails.  # noqa: E501

        Date and time when the problem was added to todo.  # noqa: E501

        :return: The creation_time of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this TodoProblemDetails.

        Date and time when the problem was added to todo.  # noqa: E501

        :param creation_time: The creation_time of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._creation_time = creation_time

    @property
    def status(self):
        """Gets the status of this TodoProblemDetails.  # noqa: E501

        Informs about the current status of the problem: whether it is attempted or not.  # noqa: E501

        :return: The status of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TodoProblemDetails.

        Informs about the current status of the problem: whether it is attempted or not.  # noqa: E501

        :param status: The status of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def tags(self):
        """Gets the tags of this TodoProblemDetails.  # noqa: E501


        :return: The tags of this TodoProblemDetails.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TodoProblemDetails.


        :param tags: The tags of this TodoProblemDetails.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def problem_name(self):
        """Gets the problem_name of this TodoProblemDetails.  # noqa: E501

        Problem name corresponding to the problem.  # noqa: E501

        :return: The problem_name of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._problem_name

    @problem_name.setter
    def problem_name(self, problem_name):
        """Sets the problem_name of this TodoProblemDetails.

        Problem name corresponding to the problem.  # noqa: E501

        :param problem_name: The problem_name of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._problem_name = problem_name

    @property
    def problem_redirect(self):
        """Gets the problem_redirect of this TodoProblemDetails.  # noqa: E501

        Is the problem redirected or not.  # noqa: E501

        :return: The problem_redirect of this TodoProblemDetails.  # noqa: E501
        :rtype: bool
        """
        return self._problem_redirect

    @problem_redirect.setter
    def problem_redirect(self, problem_redirect):
        """Sets the problem_redirect of this TodoProblemDetails.

        Is the problem redirected or not.  # noqa: E501

        :param problem_redirect: The problem_redirect of this TodoProblemDetails.  # noqa: E501
        :type: bool
        """

        self._problem_redirect = problem_redirect

    @property
    def is_added_to_practice(self):
        """Gets the is_added_to_practice of this TodoProblemDetails.  # noqa: E501

        Is the problem added to practice or not.  # noqa: E501

        :return: The is_added_to_practice of this TodoProblemDetails.  # noqa: E501
        :rtype: bool
        """
        return self._is_added_to_practice

    @is_added_to_practice.setter
    def is_added_to_practice(self, is_added_to_practice):
        """Sets the is_added_to_practice of this TodoProblemDetails.

        Is the problem added to practice or not.  # noqa: E501

        :param is_added_to_practice: The is_added_to_practice of this TodoProblemDetails.  # noqa: E501
        :type: bool
        """

        self._is_added_to_practice = is_added_to_practice

    @property
    def contest_url(self):
        """Gets the contest_url of this TodoProblemDetails.  # noqa: E501

        The link to the contest to which the problem belongs.  # noqa: E501

        :return: The contest_url of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._contest_url

    @contest_url.setter
    def contest_url(self, contest_url):
        """Sets the contest_url of this TodoProblemDetails.

        The link to the contest to which the problem belongs.  # noqa: E501

        :param contest_url: The contest_url of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._contest_url = contest_url

    @property
    def problem_url(self):
        """Gets the problem_url of this TodoProblemDetails.  # noqa: E501

        Link to the problem page.  # noqa: E501

        :return: The problem_url of this TodoProblemDetails.  # noqa: E501
        :rtype: str
        """
        return self._problem_url

    @problem_url.setter
    def problem_url(self, problem_url):
        """Sets the problem_url of this TodoProblemDetails.

        Link to the problem page.  # noqa: E501

        :param problem_url: The problem_url of this TodoProblemDetails.  # noqa: E501
        :type: str
        """

        self._problem_url = problem_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TodoProblemDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
